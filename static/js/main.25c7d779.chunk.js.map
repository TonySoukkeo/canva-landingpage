{"version":3,"sources":["components/button/button-link/button-link.component.jsx","assets/logo.png","components/button/button.styles.js","components/logo/logo.styles.js","components/logo/logo.component.jsx","components/navigation/navigation.styles.js","components/navigation/navigation.component.jsx","components/center-wrap/center-wrap.styles.js","components/center-wrap/center-wrap.component.jsx","components/route/route.component.jsx","components/error-boundary/error-boundary.styles.js","components/error-boundary/error-boundary.component.jsx","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["children","otherProps","module","exports","button","css","disabled","cursor","borderWidth","borderStyle","backgroundColor","padding","borderRadius","minHeight","outline","color","ButtonLink","styled","Link","ButtonText","div","Button","ActionButton","hoverColor","hoverBgColor","hoverBorderColor","display","alignItems","marginBottom","borderColor","transition","fontWeight","width","LogoStyle","LogoLinkWrapper","Logo","img","to","src","Img","Header","header","Nav","nav","List","ul","ListItem","li","active","position","listStyleType","fontSize","content","top","left","transform","height","background","ButtonContainer","buttonStyle","minWidth","Navigation","data-test","style","marginRight","border","Wrapper","justifyContent","CenterWrap","Route","Component","path","navigation","component","Fragment","h1","ErrorBoundary","state","hasError","this","props","error","Main","GettingStarted","lazy","LoginContainer","Signup","NotFound","App","fallback","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0JAYe,gBAAkC,IAA/BA,EAA8B,EAA9BA,SAAaC,EAAiB,4BAC9C,OAAO,kBAAC,IAAeA,EAAaD,K,mBCbtCE,EAAOC,QAAU,IAA0B,kC,qjBCI3C,IAAMC,EAASC,aAAI,gBAAGC,EAAH,EAAGA,SAAH,MAAmB,CACpCC,OAAQD,EAAW,cAAgB,UACnCE,YAAa,MACbC,YAAa,QACbC,gBAAiBJ,EAAW,qBAAuB,UACnDK,QAAS,cACTC,aAAc,QACdC,UAAW,OACXC,QAAS,OACTC,MAAOT,EAAW,qBAAuB,WAK9BU,EAAaC,YAAOC,IAAPD,CAAH,IACnBb,GAOSe,EAAaF,IAAOG,IAAV,KAKVC,EAASJ,IAAOb,OAAV,IACfA,GAGSkB,EAAeL,YAAOI,EAAPJ,EAC1B,gBAAGM,EAAH,EAAGA,WAAYC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,iBAAqBxB,EAAlD,oFACEyB,QAAS,OACTC,WAAY,SACZC,aAAc,OACdb,MAAO,wBACPc,YAAa,yBACbC,WAAY,mBACZC,WAAY,IACZC,MAAO,OACP,UAAW,CACTH,YAAaJ,GAAsC,OACnDf,gBAAiBc,GAA8B,UAC/CT,MAAOQ,GAA0B,YAEhCtB,O,+QC9CP,IAAMgC,EAAY5B,aAAI,gBAAMJ,EAAN,wCACpB+B,MAAO,QACJ/B,MAGQiC,EAAkBjB,YAAOC,IAAPD,CAAH,KAIfkB,EAAOlB,IAAOmB,IAAV,IACbH,GCRW,gBAA4B,IAAzBI,EAAwB,EAAxBA,GAAOpC,EAAiB,sBAaxC,OAVIoC,EAEA,kBAACH,EAAD,CAAiBG,GAAIA,GACnB,kBAACF,EAAD,eAAMG,IAAKC,KAAStC,KAId,kBAACkC,EAAD,eAAMG,IAAKC,KAAStC,M,sqBCd3B,IAAMuC,EAASvB,IAAOwB,OAAV,KAQNC,EAAMzB,IAAO0B,IAAV,KAKHC,EAAO3B,IAAO4B,GAAV,KAKJC,EAAW7B,IAAO8B,IAAG,gBAAGC,EAAH,EAAGA,OAAH,MAAiB,CACjDC,SAAU,WACVvB,QAAS,OACTnB,OAAQ,UACR2C,cAAe,OACfC,SAAU,SACVpB,WAAYiB,EAAS,OAAS,IAC9BrC,QAAS,SACTI,MAAO,OACPY,WAAY,SACZG,WAAY,mBAEZ,YAAa,CACXsB,QAASJ,EAAS,KAAO,GACzBC,SAAU,WACVI,IAAK,SACLC,KAAM,MACNC,UAAW,mBACXvB,MAAO,SACPwB,OAAQ,QACR5C,aAAc,OACd6C,WAAY,WAGd,UAAW,CACT1C,MAAO,eAIE2C,EAAkBzC,IAAOG,IAAV,K,gBClCtBuC,EAAc,CAClBC,SAAU,UACV7C,MAAO,OACPF,UAAW,QAuDEgD,EA/CI,WACjB,OACE,kBAACrB,EAAD,CAAQsB,YAAU,mBAChB,kBAAC,IAAD,CAAMA,YAAU,YAAYzB,GAAG,MAC/B,kBAACK,EAAD,KACE,kBAACE,EAAD,KACE,kBAACE,EAAD,CAAUgB,YAAU,YAAYd,QAAM,GAAtC,QAGA,kBAACF,EAAD,CAAUgB,YAAU,kBAApB,aACA,kBAAChB,EAAD,CAAUgB,YAAU,iBAApB,YACA,kBAAChB,EAAD,CAAUgB,YAAU,cAApB,SACA,kBAAChB,EAAD,CAAUgB,YAAU,gBAApB,aAIJ,kBAACJ,EAAD,KACE,kBAAC,IAAD,CACEI,YAAU,aACVzB,GAAG,SACH0B,MAAK,2BACAJ,GADA,IAEHK,YAAa,OACbnC,YAAa,OACbrB,YAAa,QACbE,gBAAiB,iBARrB,UAaA,kBAAC,IAAD,CACEoD,YAAU,cACVzB,GAAG,UACH0B,MAAK,2BACAJ,GADA,IAEHjD,gBAAiB,qBACjBuD,OAAQ,OACRlD,MAAO,aAPX,cCtDKmD,EAAUjD,IAAOG,KAAI,gBAAMnB,EAAN,wCAChCyB,QAAS,OACTyC,eAAgB,UACblE,MCIUmE,EAJI,SAAC,GAAD,IAAGpE,EAAH,EAAGA,SAAaC,EAAhB,mCACjB,kBAACiE,EAAYjE,EAAaD,IC0BbqE,EAjBD,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,WAAevE,EAAiB,iDAChE,OACE,kBAAC,IAAD,eACEsE,KAAMA,EACNE,UAAW,kBACT,kBAAC,IAAMC,SAAP,KACGF,EAAa,kBAAC,EAAD,MAAiB,KAC/B,kBAAC,EAAD,CAAYV,YAAU,yBACpB,kBAACQ,EAAD,UAIFrE,K,mQCzBH,IAAMiE,EAAUjD,IAAOG,IAAV,KAMPoB,EAASvB,IAAO0D,GAAV,KC0BJC,E,4MAvBbC,MAAQ,CACNC,UAAU,G,uDAOF,IACAA,EAAaC,KAAKF,MAAlBC,SACA9E,EAAa+E,KAAKC,MAAlBhF,SAER,OAAI8E,EAEA,kBAAC,EAAD,KACE,kBAAC,EAAD,wCAIC9E,K,gDAfuBiF,GAC9B,MAAO,CAAEH,UAAU,O,GANKR,a,oTCRrB,IAAMY,EAAOjE,IAAOG,IAAV,KCYX+D,EAAiBC,gBAAK,kBAC1B,sDAEIC,EAAiBD,gBAAK,kBAC1B,sDAEIE,EAASF,gBAAK,kBAAM,sDACpBG,EAAWH,gBAAK,kBAAM,gCAmBbI,MAjBf,WACE,OACE,kBAACN,EAAD,CAAMpB,YAAU,iBACd,kBAAC,EAAD,KACE,kBAAC,WAAD,CAAU2B,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAOC,OAAK,EAACnB,KAAK,IAAID,UAAWa,EAAgBX,YAAU,IAC3D,kBAAC,EAAD,CAAOD,KAAK,SAASD,UAAWe,EAAgBb,YAAU,IAC1D,kBAAC,EAAD,CAAOkB,OAAK,EAACnB,KAAK,UAAUD,UAAWgB,EAAQd,YAAU,IACzD,kBAAC,EAAD,CAAOF,UAAWiB,S,OCpBVI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACL2B,QAAQ3B,MAAMA,EAAM4B,c","file":"static/js/main.25c7d779.chunk.js","sourcesContent":["import React from \"react\";\n\n// Styled Components\nimport { ButtonLink } from \"../button.styles\";\n\n/**\n * Custom component that renders out a react-router 'Link' that wraps around it's children\n * @function ButtonLink\n * @param {any} children - wrapping JSX elements\n * @param {any} otherProps\n * @return {JSX}\n */\nexport default ({ children, ...otherProps }) => {\n  return <ButtonLink {...otherProps}>{children}</ButtonLink>;\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.85610b14.png\";","import styled, { css } from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\n// Mixins\nconst button = css(({ disabled }) => ({\n  cursor: disabled ? \"not-allowed\" : \"pointer\",\n  borderWidth: \"1px\",\n  borderStyle: \"solid\",\n  backgroundColor: disabled ? \"rgba(14,19,24,.15)\" : \"#00c4cc\",\n  padding: \"0.3rem 1rem\",\n  borderRadius: \".3rem\",\n  minHeight: \"45px\",\n  outline: \"none\",\n  color: disabled ? \"rgba(14,19,24,.45)\" : \"#fff\",\n}));\n\n// Custom styled components\n\nexport const ButtonLink = styled(Link)`\n  ${button}\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-decoration: none;\n`;\n\nexport const ButtonText = styled.div`\n  flex: 1;\n  text-align: center;\n`;\n\nexport const Button = styled.button`\n  ${button}\n`;\n\nexport const ActionButton = styled(Button)(\n  ({ hoverColor, hoverBgColor, hoverBorderColor, ...otherProps }) => ({\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: \"1rem\",\n    color: \"rgba(14, 19, 24, 0.7)\",\n    borderColor: \"rgba(14, 19, 24, 0.15)\",\n    transition: \"all 0.1s ease-in\",\n    fontWeight: 400,\n    width: \"100%\",\n    \"&:hover\": {\n      borderColor: hoverBorderColor ? hoverBorderColor : \"#333\",\n      backgroundColor: hoverBgColor ? hoverBgColor : \"inherit\",\n      color: hoverColor ? hoverColor : \"inherit\",\n    },\n    ...otherProps,\n  })\n);\n","import styled, { css } from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\n// Mixins\nconst LogoStyle = css(({ ...otherProps }) => ({\n  width: \"4rem\",\n  ...otherProps,\n}));\n\nexport const LogoLinkWrapper = styled(Link)`\n  display: flex;\n`;\n\nexport const Logo = styled.img`\n  ${LogoStyle}\n`;\n","import React from \"react\";\nimport Img from \"../../assets/logo.png\";\n\n// Styled Components\nimport { LogoLinkWrapper, Logo } from \"./logo.styles\";\n\nexport default ({ to, ...otherProps }) => {\n  let display;\n\n  if (to) {\n    display = (\n      <LogoLinkWrapper to={to}>\n        <Logo src={Img} {...otherProps} />\n      </LogoLinkWrapper>\n    );\n  } else {\n    display = <Logo src={Img} {...otherProps} />;\n  }\n\n  return display;\n};\n","import styled from \"styled-components\";\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem 2.5rem;\n  margin-bottom: 3rem;\n  height: 5rem;\n`;\n\nexport const Nav = styled.nav`\n  margin-left: 1.5rem;\n  height: 100%;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  height: 100%;\n`;\n\nexport const ListItem = styled.li(({ active }) => ({\n  position: \"relative\",\n  display: \"flex\",\n  cursor: \"pointer\",\n  listStyleType: \"none\",\n  fontSize: \"0.9rem\",\n  fontWeight: active ? \"bold\" : 400,\n  padding: \"0 1rem\",\n  color: \"#fff\",\n  alignItems: \"center\",\n  transition: \"all 0.1s ease-in\",\n\n  \"&::before\": {\n    content: active ? \"''\" : \"\",\n    position: \"absolute\",\n    top: \"-.5rem\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    width: \"2.3rem\",\n    height: \".3rem\",\n    borderRadius: \"1rem\",\n    background: \"#00c4cc\",\n  },\n\n  \"&:hover\": {\n    color: \"#00c4cc\",\n  },\n}));\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  margin-left: auto;\n`;\n","import React from \"react\";\n\n// styled-components\nimport {\n  Header,\n  Nav,\n  List,\n  ListItem,\n  ButtonContainer,\n} from \"./navigation.styles\";\n\n// Custom Component\nimport ButtonLink from \"../button/button-link/button-link.component\";\nimport Logo from \"../logo/logo.component\";\n\nconst buttonStyle = {\n  minWidth: \"81.53px\",\n  color: \"#fff\",\n  minHeight: \"auto\",\n};\n\n/**\n * Renders out main navigation component\n * @function Navigation\n * @return {JSX}\n */\nconst Navigation = () => {\n  return (\n    <Header data-test=\"main-navigation\">\n      <Logo data-test=\"main-logo\" to=\"/\" />\n      <Nav>\n        <List>\n          <ListItem data-test=\"home-link\" active>\n            Home\n          </ListItem>\n          <ListItem data-test=\"templates-link\">Templates</ListItem>\n          <ListItem data-test=\"discover-link\">Discover</ListItem>\n          <ListItem data-test=\"learn-link\">Learn</ListItem>\n          <ListItem data-test=\"pricing-link\">Pricing</ListItem>\n        </List>\n      </Nav>\n\n      <ButtonContainer>\n        <ButtonLink\n          data-test=\"log-in-btn\"\n          to=\"/login\"\n          style={{\n            ...buttonStyle,\n            marginRight: \"1rem\",\n            borderColor: \"#fff\",\n            borderWidth: \"1.6px\",\n            backgroundColor: \"transparent\",\n          }}\n        >\n          Log in\n        </ButtonLink>\n        <ButtonLink\n          data-test=\"sign-up-btn\"\n          to=\"/signup\"\n          style={{\n            ...buttonStyle,\n            backgroundColor: \"rgb(239, 239, 239)\",\n            border: \"none\",\n            color: \"#0e1318\",\n          }}\n        >\n          Sign up\n        </ButtonLink>\n      </ButtonContainer>\n    </Header>\n  );\n};\n\nexport default Navigation;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div(({ ...otherProps }) => ({\n  display: \"flex\",\n  justifyContent: \"center\",\n  ...otherProps,\n}));\n","import React from \"react\";\n\n// Styled Components\nimport { Wrapper } from \"./center-wrap.styles\";\n\nconst CenterWrap = ({ children, ...otherProps }) => (\n  <Wrapper {...otherProps}>{children}</Wrapper>\n);\n\nexport default CenterWrap;\n","import React from \"react\";\nimport { Route as BrowserRoute } from \"react-router-dom\";\n\n// Component\nimport Navigation from \"../navigation/navigation.component\";\nimport CenterWrap from \"../center-wrap/center-wrap.component\";\n\n/**\n * Renders out component with or without navigation for route\n * @function Route\n * @param {JSX} Component - component that route will render\n * @param {String} path - string path on what route will match to\n * @param {Boolean} navigation - Boolean whether or not to show navigation or not\n * @param {any} otherProps - Any other props that might get passed into Route custom component\n */\nconst Route = ({ Component, path, navigation, ...otherProps }) => {\n  return (\n    <BrowserRoute\n      path={path}\n      component={() => (\n        <React.Fragment>\n          {navigation ? <Navigation /> : null}\n          <CenterWrap data-test=\"component-center-wrap\">\n            <Component />\n          </CenterWrap>\n        </React.Fragment>\n      )}\n      {...otherProps}\n    />\n  );\n};\n\nexport default Route;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 10rem;\n`;\n\nexport const Header = styled.h1`\n  color: #fff;\n`;\n","import React, { Component } from \"react\";\n\n// Styled Components\nimport { Header, Wrapper } from \"./error-boundary.styles\";\n\n/**\n * Component that wraps around other component and catches any error that they may have and display a fallback UI if there are any errors\n * @function ErrorBoundary\n * @returns {JSX}\n */\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    if (hasError)\n      return (\n        <Wrapper>\n          <Header>Ooops, something went wrong :(</Header>\n        </Wrapper>\n      );\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","import styled from \"styled-components\";\n\nexport const Main = styled.div`\n  min-height: 100vh;\n  width: 100%;\n  background-image: url(https://static.canva.com/web/images/31294342b3f4484b5da189009d582604.jpg);\n  background-size: 100% auto;\n  background-position: top;\n  background-repeat: no-repeat;\n`;\n","import React, { lazy, Suspense } from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport Route from \"./components/route/route.component\";\n\n// Custo Components\nimport ErrorBoundary from \"./components/error-boundary/error-boundary.component\";\n\n// Css styles\nimport \"./App.css\";\n\n// Styled Components\nimport { Main } from \"./App.styles\";\n\n// Lazy load components\nconst GettingStarted = lazy(() =>\n  import(\"./pages/getting-started/getting-started.component\")\n);\nconst LoginContainer = lazy(() =>\n  import(\"./pages/login/login-container.component\")\n);\nconst Signup = lazy(() => import(\"./pages/signup/signup.component\"));\nconst NotFound = lazy(() => import(\"./pages/not-found/not-found.component\"));\n\nfunction App() {\n  return (\n    <Main data-test=\"component-app\">\n      <ErrorBoundary>\n        <Suspense fallback={<div>...loading</div>}>\n          <Switch>\n            <Route exact path=\"/\" Component={GettingStarted} navigation />\n            <Route path=\"/login\" Component={LoginContainer} navigation />\n            <Route exact path=\"/signup\" Component={Signup} navigation />\n            <Route Component={NotFound} />\n          </Switch>\n        </Suspense>\n      </ErrorBoundary>\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}